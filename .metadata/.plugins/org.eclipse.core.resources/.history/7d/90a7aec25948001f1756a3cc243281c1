package com.lucas.Infra.Security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfigurations {
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception {
		return httpSecurity
					.csrf(csrf -> csrf.disable())
					.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
					.authorizeHttpRequests(authorize -> authorize
						.requestMatchers(HttpMethod.GET, "/barbeiro").hasRole("BARBEIRO")
					    .requestMatchers(HttpMethod.POST, "/barbeiro").hasRole("BARBEIRO")
					    .requestMatchers(HttpMethod.PUT, "/barbeiro").hasRole("BARBEIRO")
					    .requestMatchers(HttpMethod.DELETE, "/barbeiro").hasRole("BARBEIRO")
						.anyRequest().authenticated() //libera os endpoint  
				)
				.build();
	}
	
	public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) {
		
	}
}
