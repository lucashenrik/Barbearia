package com.lucas.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.lucas.models.Barbeiro;
import com.lucas.models.dtos.AutenticacaoDTO;
import com.lucas.models.dtos.RegistrarDTO;
import com.lucas.repositories.BarbeiroRepositorio;


@RestController
@RequestMapping("auth")
public class AutenticacaoControler {
	
	@Autowired
	public AuthenticationManager authenticationManager;
	
	@Autowired
	public BarbeiroRepositorio repositorio;
	
	/*@PostMapping("/login")
	public ResponseEntity login(@RequestBody @Validated AutenticacaoDTO data) {
		var usernamePassword = new UsernamePasswordAuthenticationToken(data.email() , data.senha());
		var auth = this.authenticationManager.authenticate(usernamePassword);
		
		return ResponseEntity.ok().build();
	}
	
	@PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody @Validated AutenticacaoDTO data) {
        try {
            var usernamePassword = new UsernamePasswordAuthenticationToken(data.email(), data.senha());
            var auth = this.authenticationManager.authenticate(usernamePassword);
            return ResponseEntity.ok().build();
        } catch (AuthenticationException e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Credenciais inválidas");
        }
    }*/
	
	@PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody @Validated AutenticacaoDTO data) {
        try {
            var usernamePassword = new UsernamePasswordAuthenticationToken(data.email(), data.senha());
            var auth = this.authenticationManager.authenticate(usernamePassword);
            System.out.println("Tentativa de login com email: " + data.email() + " e senha: " + data.senha());

            return ResponseEntity.ok().build();
        } catch (AuthenticationException e) {
            System.out.println("Erro de autenticação: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Credenciais inválidas");
        }
    }
	
	@PostMapping("/registrar")
	public ResponseEntity registrar(@RequestBody @Validated RegistrarDTO data) {
		if (this.repositorio.findByEmail(data.email()) != null) return ResponseEntity.badRequest().build();
		
		String senhaEncriptada = new BCryptPasswordEncoder().encode(data.senha());
		Barbeiro novoBarbeiro = new Barbeiro(data.nome(), data.email(), data.telefone(), senhaEncriptada, data.role());
		
		System.out.println("nome do barbeiro eh: " + data.nome());
		this.repositorio.save(novoBarbeiro);
		
		return ResponseEntity.ok().build();
	}
}
