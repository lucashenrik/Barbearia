package com.lucas.Infra.Security;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.lucas.models.Adminstrador;
import com.lucas.models.Barbeiro;
import com.lucas.repositories.AdministradorRepositorio;
import com.lucas.repositories.BarbeiroRepositorio;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class SecurityFilter extends OncePerRequestFilter {

	@Autowired
	BarbeiroRepositorio repositorio;
	
	@Autowired
	AdministradorRepositorio adminRepositorio;
	
	@Autowired
	TokenServico tokenServico;
	
	/*@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		var token = this.recoverToken(request);
		
		/*if(token != null) {
			var  login = tokenServico.validarToken(token);
			//UserDetails user = repositorio.findByEmail(login);
			Barbeiro user = repositorio.findByEmail(login);
			
			var authentication = new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());
			SecurityContextHolder.getContext().setAuthentication(authentication);
		}//////
		if(token != null) {
            var login = tokenServico.validarToken(token);
            Barbeiro user = repositorio.findByEmail(login);
            
            if (user != null) {
                var authentication = new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());
                SecurityContextHolder.getContext().setAuthentication(authentication);
            }
        }
		filterChain.doFilter(request, response);
	}*/
	
	/*@Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {
        String token = request.getHeader("Authorization");
        if (token != null && token.startsWith("Bearer ")) {
            token = token.substring(7); // Remove o prefixo "Bearer "
            String email = tokenServico.validarToken(token);
            if (email != null) {
            	System.out.println("Email extraído do token: " + email);
            	Adminstrador adminUserDetails = adminRepositorio.findByEmail(email);
                if (adminUserDetails != null) {
                	System.out.println("Admin encontrado: " + adminUserDetails.getUsername());
                	System.out.println("authoridadesks: " + adminUserDetails.getAuthorities());
                    var auth = new UsernamePasswordAuthenticationToken(adminUserDetails, null, adminUserDetails.getAuthorities());
                    SecurityContextHolder.getContext().setAuthentication(auth);
            } else {
            	Barbeiro userDetails = repositorio.findByEmail(email);
            	 if (userDetails != null) {
            		 System.out.println("Barbeiro encontrado: " + userDetails.getUsername());
            		 System.out.println("authoridadess: " + userDetails.getAuthorities());
            		 var auth = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                SecurityContextHolder.getContext().setAuthentication(auth);
            }
            }
            }
        }
        filterChain.doFilter(request, response);
    }*/
	
	/*@Override
	protected void doFilterInternal(HttpServletRequest request,
	                                HttpServletResponse response,
	                                FilterChain filterChain) throws ServletException, IOException {
	    String token = request.getHeader("Authorization");
	    if (token != null && token.startsWith("Bearer ")) {
	        token = token.substring(7); // Remove o prefixo "Bearer "
	        String email = tokenServico.validarToken(token);
	        if (email != null) {
	            System.out.println("Email extraído do token: " + email);
	            
	            // Verificar se é um administrador
	            Adminstrador adminUserDetails = adminRepositorio.findByEmail(email);
	            if (adminUserDetails != null) {
	                System.out.println("Administrador encontrado: " + adminUserDetails.getUsername());
	                System.out.println("Autoridades do Administrador: " + adminUserDetails.getAuthorities());
	                
	                var auth = new UsernamePasswordAuthenticationToken(adminUserDetails, null, adminUserDetails.getAuthorities());
	                SecurityContextHolder.getContext().setAuthentication(auth);
	            } else {
	                // Verificar se é um barbeiro
	                Barbeiro userDetails = repositorio.findByEmail(email);
	                if (userDetails != null) {
	                    System.out.println("Barbeiro encontrado: " + userDetails.getUsername());
	                    System.out.println("Autoridades do Barbeiro: " + userDetails.getAuthorities());
	                    
	                    var auth = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
	                    SecurityContextHolder.getContext().setAuthentication(auth);
	                } else {
	                    System.out.println("Nenhum usuário encontrado com o e-mail: " + email);
	                }
	            }
	        }
	    }
	    filterChain.doFilter(request, response);
	}*/// esse pede a role admin

	/*@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		var token = this.recoverToken(request);
		
		if(token != null) {
            var login = tokenServico.validarToken(token);
            Barbeiro user = repositorio.findByEmail(login);
            
            if (user != null) {
                var authentication = new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());
                SecurityContextHolder.getContext().setAuthentication(authentication);
            }
        }
		filterChain.doFilter(request, response);
	}

	private String recoverToken(HttpServletRequest request) {
		var authHeader = request.getHeader("Authorization");
		if(authHeader == null) return null;
		return authHeader.replace("Bearer", "");
	}

}*/
	
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
	        throws ServletException, IOException {
		String token = recoverToken(request);

	    if (token != null) {
	        String login = tokenServico.validarToken(token);
	        
	        Adminstrador admin = adminRepositorio.findByEmail(login);
	        System.out.println("Email resgatado: " + admin.getEmail() + "senha: " + admin.getPassword());
	        if (admin != null) {
	            UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(admin, null, admin.getAuthorities());
	            SecurityContextHolder.getContext().setAuthentication(authentication);
	        } else {
	            Barbeiro user = repositorio.findByEmail(login);
	            if (user != null) {
	                UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(user, null, user.getAuthorities());
	                SecurityContextHolder.getContext().setAuthentication(authentication);
	            }
	        }
	    }
	    filterChain.doFilter(request, response);
	}

	private String recoverToken(HttpServletRequest request) {
	    String authHeader = request.getHeader("Authorization");
	    if (authHeader == null || !authHeader.startsWith("Bearer ")) return null;
	    return authHeader.substring(7);
	}
}