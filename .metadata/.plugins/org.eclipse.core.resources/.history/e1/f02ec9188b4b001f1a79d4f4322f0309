package com.lucas.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.lucas.models.AdminUserDetails;
import com.lucas.models.Adminstrador;
import com.lucas.models.Barbeiro;
import com.lucas.models.CustomUserDetails;
import com.lucas.repositories.AdministradorRepositorio;
import com.lucas.repositories.BarbeiroRepositorio;

@Service
public class AuthorizationService implements UserDetailsService {

	@Autowired
	BarbeiroRepositorio barbeiroRepositorio;
	
	@Autowired
	AdministradorRepositorio adminRepositorio;
	
	
		@Override
		public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
		    // Primeiro, tente encontrar um administrador pelo email
			 Adminstrador adminOpt = adminRepositorio.findByEmail(email);
			 if (adminOpt != null) {
			        return new AdminUserDetails(adminOpt);
			    }
			    
			    // Se não encontrou um administrador, tente encontrar um barbeiro
			    Barbeiro barbeiroOpt = barbeiroRepositorio.findByEmail(email);
			    if (barbeiroOpt != null) {
			        return new CustomUserDetails(barbeiroOpt);
			    }

			    // Se nenhum usuário for encontrado, lance uma exceção apropriada
			    throw new UsernameNotFoundException("User not found with email: " + email);
		}
		
	/*@Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        /*Barbeiro barbeiro = barbeiroRepositorio.findByEmail(email)
        		.orElseThrow(() -> new UsernameNotFoundException("Barbeiro não encontrado com o email: " + email));
        if (barbeiro == null) {
            //throw new UsernameNotFoundException("User not found");
            return new CustomUserDetails(barbeiro);
        }
        
        //
        Adminstrador admin = adminRepositorio.findByEmail(email);
        if (admin != null) {
            return new AdminUserDetails(admin);
        }
        //
        throw new UsernameNotFoundException("Usuário não encontrado com o email: " + email);
    }*/
}